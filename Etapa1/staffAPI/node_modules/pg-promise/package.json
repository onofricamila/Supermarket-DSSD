{
  "_from": "pg-promise@5",
  "_id": "pg-promise@5.9.7",
  "_inBundle": false,
  "_integrity": "sha512-Hp53E6qdjxyuNepIpr7ONbsKZ2GYfi+HbuW4VNMfWcCSZPlE/A9DieYc82AJaz2f9eHcmByeU7TiQTmsBu3hGA==",
  "_location": "/pg-promise",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "pg-promise",
    "fetchSpec": "5",
    "name": "pg-promise",
    "raw": "pg-promise@5",
    "rawSpec": "5",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/pg-promise/-/pg-promise-5.9.7.tgz",
  "_shasum": "4c78f58061cf04d6afa86baacf0bdd0cf8281c8e",
  "_shrinkwrap": null,
  "_spec": "pg-promise@5",
  "_where": "C:\\GitHub\\Supermarket-DSSD\\Etapa1\\staffAPI",
  "author": {
    "email": "vitaly.tomilov@gmail.com",
    "name": "Vitaly Tomilov"
  },
  "bugs": {
    "email": "vitaly.tomilov@gmail.com",
    "url": "https://github.com/vitaly-t/pg-promise/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "manakin": "^0.4.7",
    "pg": "^5.1.0",
    "pg-minify": "0.4",
    "spex": "1.2"
  },
  "deprecated": false,
  "description": "Promises interface for PostgreSQL",
  "devDependencies": {
    "@types/node": "7.0",
    "JSONStream": "1.3",
    "bluebird": "3.5",
    "coveralls": "2.11",
    "eslint": "^4.1.0",
    "istanbul": "0.4",
    "jasmine-node": "1.14",
    "jsdoc": "3.4",
    "pg-query-stream": "1.x",
    "typescript": "2.3"
  },
  "engines": {
    "node": ">=4.0",
    "npm": ">=2.15"
  },
  "files": [
    "lib",
    "typescript"
  ],
  "homepage": "https://github.com/vitaly-t/pg-promise",
  "keywords": [
    "pg",
    "postgres",
    "promise"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "pg-promise",
  "optionalDependencies": {},
  "readme": "pg-promise\n===========\n\n[Promises/A+] interface for PostgreSQL.\n\n[![Build Status](https://travis-ci.org/vitaly-t/pg-promise.svg?branch=master)](https://travis-ci.org/vitaly-t/pg-promise)\n[![Coverage Status](https://coveralls.io/repos/vitaly-t/pg-promise/badge.svg?branch=master)](https://coveralls.io/r/vitaly-t/pg-promise?branch=master)\n[![Package Quality](http://npm.packagequality.com/shield/pg-promise.svg)](http://packagequality.com/#?package=pg-promise)\n[![Join the chat at https://gitter.im/vitaly-t/pg-promise](https://img.shields.io/gitter/room/vitaly-t/pg-promise.svg)](https://gitter.im/vitaly-t/pg-promise?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n---\n<a href=\"https://promisesaplus.com/\"><img align=\"right\" width=\"190\" height=\"190\" src=\"http://s8.postimg.org/k7dtue8lx/pg_promise.jpg\"></a>\n\n* Supporting [Promise], [Bluebird], [When], [Q], etc.\n* Transactions, functions, flexible query formatting;\n* Automatic database connections;\n* Strict query result filters.\n\n<a href='https://pledgie.com/campaigns/32367'><img alt='Click here to lend your support to: pg-promise and make a donation at pledgie.com !' src='https://pledgie.com/campaigns/32367.png?skin_name=chrome' border='0' ></a>\n\n---\n\n* [About](#about)\n* [Installing](#installing)\n* [Getting Started](#getting-started)\n  - [Initialization](#initialization)\n  - [Database](#database)\n  - [Documentation](#documentation)  \n* [Testing](#testing)    \n* [Usage](#usage)\n  - [Queries and Parameters](#queries-and-parameters)\n    - [SQL Names](#sql-names)  \n    - [Raw Text](#raw-text)  \n    - [Open Values](#open-values)        \n  - [Query Result Mask](#query-result-mask)    \n  - [Named Parameters](#named-parameters)\n  - [Conversion Helpers](#conversion-helpers)\n  - [Custom Type Formatting](#custom-type-formatting)  \n    - [Raw Custom Types](#raw-custom-types)   \n  - [Query Files](#query-files)    \n  - [Tasks](#tasks)    \n  - [Transactions](#transactions)\n    - [Nested Transactions](#nested-transactions)\n    - [Synchronous Transactions](#synchronous-transactions)    \n    - [Configurable Transactions](#configurable-transactions)\n  - [Generators](#generators)\n* [Advanced](#advanced)\n  - [Initialization Options](#initialization-options)\n  - [Library de-initialization](#library-de-initialization)\n* [History](#history)\n* [License](#license)\n\n---\n\n# About\n\nBuilt on top of [node-postgres] and its connection pool, this library translates their callback interface into one based on [Promises/A+],\nwhile extending the protocol to a higher level, with automated connections and transactions management.\n\nIn addition, the library provides:\n\n* its own, more flexible query formatting\n* events reporting for connectivity, errors, queries, etc.\n* support for all popular promise libraries + ES6 generators\n* declarative approach to controlling query results\n* extensive support for external SQL files\n\n# Installing\n```\n$ npm install pg-promise\n```\n\n# Getting Started\n\n## Initialization\n\nLoading and initializing the library with [Initialization Options]:\n\n```js\nconst pgp = require('pg-promise')({\n    // Initialization Options\n});\n```\n\n&#8722; or without [Initialization Options]:\n\n```js\nconst pgp = require('pg-promise')();\n```\n \n## Database\n\nCreate your [Database] object from the connection details:\n\n```js\nconst db = pgp(connection);\n```\n\nThe `connection` parameter can be any of the following:\n\n* [Configuration Object]\n* [Connection String]\n\nObject `db` represents the [Database] protocol with lazy connection, i.e. only the actual query methods acquire\nand release the connection. You should create only one global/shared `db` object per connection details.\n\n## Documentation\n\n* [Learn by Example] - the quickest way to get started with this library\n* [Protocol API] - all the latest protocol documentation\n* [Wiki Pages](https://github.com/vitaly-t/pg-promise/wiki) - all the documentation references\n* [TypeScript 2.x](https://github.com/vitaly-t/pg-promise/tree/master/typescript) declarations for the library\n\n# Testing\n\n* Clone the repository (or download, if you prefer):\n```\n$ git clone https://github.com/vitaly-t/pg-promise\n```\n\n* Install the library's DEV dependencies:\n```\n$ npm install\n```\n\n* Make sure all tests can connect to your local test database, using the connection details in\n[test/db/header.js](https://github.com/vitaly-t/pg-promise/blob/master/test/db/header.js).\nEither set up your test database accordingly or change the connection details in that file.\n\n* Initialize the database with some test data:\n```\n$ node test/db/init.js\n```\n\n* To run all tests:\n```\n$ npm test\n```\n\n* To run all tests with coverage:\n```\n$ npm run coverage\n```\n\n# Usage\n\n## Queries and Parameters\n\nEvery connection context of the library shares the same query protocol, starting with generic method [query],\ndefined as shown below:\n\n```js\nfunction query(query, values, qrm){}\n```\n\n* `query` (required) - a string with support for three types of formatting, depending on the `values` passed:\n   - format `$1` (single variable), if `values` is of type `string`, `boolean`, `number`, `Date`, `function`, `null` or [QueryFile];\n   - format `$1, $2, etc..`, if `values` is an array;\n   - format `$*propName*`, if `values` is an object (not `null` and not `Date`), where `*` is any of the supported open-close pairs: `{}`, `()`, `<>`, `[]`, `//`;\n* `values` (optional) - value/array/object to replace the variables in the query;\n* `qrm` - (optional) *Query Result Mask*, as explained below. When not passed, it defaults to `pgp.queryResult.any`.\n\nWhen a value/property inside array/object is an array, it is treated as a [PostgreSQL Array Type](http://www.postgresql.org/docs/9.4/static/arrays.html),\nconverted into the array constructor format of `array[]`, the same as calling method `pgp.as.array()`.\n\nWhen a value/property inside array/object is of type `object` (except for `null`, `Date` or `Buffer`), it is automatically\nserialized into JSON, the same as calling method `pgp.as.json()`, except the latter would convert anything to JSON.\n\nFor the latest SQL formatting support see the API: methods [query] and [as.format].\n\n### SQL Names\n\nWhen a variable ends with `~` (tilde) or `:name`, it represents an SQL name or identifier, which must be a text\nstring of at least 1 character long. Such name is then properly escaped and wrapped in double quotes.\n\n```js\nquery('INSERT INTO $1~($2~) VALUES(...)', ['Table Name', 'Column Name']);\n//=> INSERT INTO \"Table Name\"(\"Column Name\") VALUES(...)\n\n// A mixed example for a dynamic column list:\nconst columns = ['id', 'message'];\nquery('SELECT ${columns^} FROM ${table~}', {\n    columns: columns.map(pgp.as.name).join(),\n    table: 'Table Name'\n});\n//=> SELECT \"id\",\"message\" FROM \"Table Name\"\n```\n\nVersion 5.2.1 and later supports extended syntax for `${this~}` and for method [as.name]:\n\n```js\nconst obj = {\n    one: 1,\n    two: 2\n};\n\nformat('INSERT INTO table(${this~}) VALUES(${one}, ${two})', obj);\n//=>INSERT INTO table(\"one\",\"two\") VALUES(1, 2)\n```\n\nRelying on this type of formatting for sql names and identifiers, along with regular variable formatting\nmakes your application impervious to sql injection.\n\nSee method [as.name] for the latest API.\n\n**Version 5.9.0** added explicit support for SQL aliases, to keep them separate from the generic SQL Names,\nas they only allow a simple syntax. See method [as.alias].\n\nThe formatting engine was extended with modifier `:alias`, which automatically calls method [as.alias].\n\n### Raw Text\n\nRaw-text values can be injected by ending the variable name with `^` or `:raw`:\n`$1^, $2^, etc...`, `$*varName^*`, where `*` is any of the supported open-close pairs: `{}`, `()`, `<>`, `[]`, `//`\n\nRaw text is injected without any pre-processing, which means:\n\n* No proper escaping (replacing each single-quote symbol `'` with two);\n* No wrapping text into single quotes.\n\nUnlike regular variables, value for raw-text variables cannot be `null` or `undefined`, because of the ambiguous meaning\nin this case. If such values are passed in, the formatter will throw error `Values null/undefined cannot be used as raw text.` \n\nSpecial syntax `this^` within the [Named Parameters](#named-parameters) refers to the formatting object itself, to be injected\nas a raw-text JSON-formatted string.\n\nFor the latest SQL formatting support see method [as.format]\n\n### Open Values\n\nOpen values simplify concatenation of string values within a query, primarily for such special cases as `LIKE`/`ILIKE` filters.\n\nNames for open-value variables end with either `:value` or symbol `#`, and it means that such a value is to be properly\nformatted and escaped, but not to be wrapped in quotes when it is a text.\n\nSimilar to [raw-text](#raw-text) variables, open-value variables are also not allowed to be `null` or `undefined`, or they will throw\nerror `Open values cannot be null or undefined.` And the difference is that [raw-text](#raw-text) variables are not escaped, while\nopen-value variables are properly escaped.\n\nBelow is an example of formatting `LIKE` filter that ends with a second name: \n\n```js\n// using $1# or $1:value syntax:\nquery('...WHERE name LIKE \\'%$1#\\'', 'O\\'Connor');\nquery('...WHERE name LIKE \\'%$1:value\\'', 'O\\'Connor');\n//=> ...WHERE name LIKE '%O''Connor'\n\n// using ${propName#} or ${propName:value} syntax:\nquery('...WHERE name LIKE \\'%${filter#}\\'', {filter: 'O\\'Connor'});\nquery('...WHERE name LIKE \\'%${filter:value}\\'', {filter: 'O\\'Connor'});\n//=> ...WHERE name LIKE '%O''Connor'\n```\n\nSee also: method [as.value].\n\n## Query Result Mask\n\nIn order to eliminate the chances of unexpected query results and thus make the code more robust,\nmethod [query] uses parameter `qrm` (Query Result Mask):\n\n```js\n///////////////////////////////////////////////////////\n// Query Result Mask flags;\n//\n// Any combination is supported, except for one + many.\nconst queryResult = {\n    /** Single row is expected. */\n    one: 1,\n    /** One or more rows expected. */\n    many: 2,\n    /** Expecting no rows. */\n    none: 4,\n    /** many|none - any result is expected. */\n    any: 6\n};\n```\n\nIn the following generic-query example we indicate that the call can return anything:\n\n```js\ndb.query('select * from users');\n```\n\nwhich is equivalent to making one of the following calls:\n\n```js\nconst qrm = pgp.queryResult;\ndb.query('SELECT * FROM users', undefined, qrm.many | qrm.none);\ndb.query('SELECT * FROM users', undefined, qrm.any);\ndb.manyOrNone('SELECT * FROM users');\ndb.any('SELECT * FROM users');\n```\n\nThis usage pattern is facilitated through result-specific methods that can be used instead of the generic query:\n\n```js\ndb.many(query, values); // expects one or more rows\ndb.one(query, values); // expects a single row\ndb.none(query, values); // expects no rows\ndb.any(query, values); // expects anything, same as `manyOrNone`\ndb.oneOrNone(query, values); // expects 1 or 0 rows\ndb.manyOrNone(query, values); // expects anything, same as `any`\n```\n\nThere is however one specific method `result(query, values)` to bypass any result verification, and instead resolve\nwith the original [Result] object passed from the [PG] library.\n\nYou can also add your own methods and properties to this protocol via the [extend](#extend) event.  \n\nEach query function resolves its **data** according to the `qrm` that was used:\n\n* `none` - **data** is `null`. If the query returns any kind of data, it is rejected.\n* `one` - **data** is a single object. If the query returns no data or more than one row of data, it is rejected.\n* `many` - **data** is an array of objects. If the query returns no rows, it is rejected.\n* `one`|`none` - **data** is `null`, if no data was returned; or a single object, if one row was returned.\n    If the query returns more than one row of data, the query is rejected.\n* `many`|`none` - **data** is an array of objects. When no rows are returned, **data** is an empty array.\n\nIf you try to specify `one`|`many` in the same query, such query will be rejected without executing it, telling you that such mask is invalid.\n\nIf `qrm` is not specified when calling generic [query] method, it is assumed to be `many`|`none` = `any`, i.e. any kind of data expected.\n\n> This is all about writing robust code, when the client specifies what kind of data it is ready to handle on the declarative level,\nleaving the burden of all extra checks to the library.\n\n## Named Parameters\n\nThe library supports named parameters in query formatting, with the syntax of `$*propName*`, where `*` is any of the following open-close\npairs: `{}`, `()`, `<>`, `[]`, `//`\n\n```js\ndb.query('SELECT * FROM users WHERE name=${name} AND active=$/active/', {\n    name: 'John',\n    active: true\n});\n```\n\nThe same goes for all types of query methods as well as method [as.format], where `values` can also be an object whose properties can be\nreferred to by name from within the query.\n\nA valid property name consists of any combination of letters, digits, underscores or `$`, and they are case-sensitive.\nLeading and trailing spaces around property names are ignored.\n\nIt is important to know that while property values `null` and `undefined` are both formatted as `null`,\nan error is thrown when the property doesn't exist at all (except for `partial` replacements - see below).\n\nYou can also use `partial` replacements within method [as.format], to ignore variables that do not exist in the formatting object.\n\n#### `this` reference\n\nProperty `this` is a reference to the formatting object itself, so it can be inserted as a JSON-formatted string, alongside its properties.\n\n* `${this}` - inserts the object itself as a JSON-formatted string;\n* `${this^}` - inserts the object itself as a raw-text JSON-formatted string.\n\n**example:**\n\n```js\nconst doc = {\n    id: 123,\n    body: 'some text'\n};\n\ndb.none('INSERT INTO documents(id, doc) VALUES(${id}, ${this})', doc)\n    .then(() => {\n        // success;\n    })\n    .catch(error => {\n        // error;\n    });\n```    \n\nwhich will execute:\n```sql\nINSERT INTO documents(id, doc) VALUES(123, '{\"id\":123,\"body\":\"some text\"}')\n```\n\nModifier `:json` is an alternative to formatting the value as a JSON string.\n\n**NOTE:** Technically, it is possible in javascript, though not recommended, for an object to contain a property\nwith name `this`. And in such cases the property's value will be used instead.\n\n## Functions and Procedures\n\nIn PostgreSQL stored procedures are just functions that usually do not return anything.\n\nSuppose we want to call function **findAudit** to find audit records by `user_id` and maximum timestamp.\nWe can make such call as shown below:\n\n```js\ndb.func('findAudit', [123, new Date()])\n    .then(data => {\n        console.log(data); // printing the data returned\n    })\n    .catch(error => {\n        console.log(error); // printing the error\n    });\n```\n\nWe passed it `user_id = 123`, plus current Date/Time as the timestamp. We assume that the function signature matches\nthe parameters that we passed. All values passed are serialized automatically to comply with PostgreSQL type formats.\n\nMethod `func` accepts optional third parameter - `qrm` (Query Result Mask), the same as method [query].\n\nAnd when you are not expecting any return results, call `db.proc` instead. Both methods return a [Promise] object,\nbut `db.proc` doesn't take a `qrm` parameter, always assuming it is `one`|`none`.\n\nSummary for supporting procedures and functions:\n\n* `func(query, values, qrm)` - expects the result according to `qrm`\n* `proc(query, values)` - calls `func(query, values, qrm.one | qrm.none)`\n\n## Conversion Helpers\n\nThe library provides several helper functions to convert javascript types into their proper PostgreSQL presentation that can be passed\ndirectly into queries or functions as parameters. All of such helper functions are located within namespace [pgp.as], and each function\nreturns a formatted string when successful or throws an error when it fails.\n\n## Custom Type Formatting\n\nWhen we pass `values` as a single parameter or inside an array, it is verified to be an object/value\nthat supports function `formatDBType`, as either its own or inherited. And if the function exists,\nits return result overrides both the actual value and the formatting syntax for parameter `query`.\n\nThis allows usage of your own custom types as formatting parameters for the queries, as well as\noverriding formatting for standard object types, such as `Date` and `Array`.\n\n**Example: your own type formatting**\n\n```js\nfunction Money(m) {\n    this.amount = m;\n    this.formatDBType = a => a.amount.toFixed(2);\n}\n```\n\n**Example: overriding standard types**\n\n```js\nDate.prototype.formatDBType = a => a.getTime();\n```\n\nFunction `formatDBType` is allowed to return absolutely anything, including:\n* instance of another object that supports its own custom formatting;\n* instance of another object that does not have its own custom formatting;\n* another function, with recursion of any depth;\n\nPlease note that the return result from `formatDBType` may even affect the\nformatting syntax expected within parameter `query`, as explained below.\n\nIf you pass in `values` as an object that has function `formatDBType`,\nand that function returns an array, then your `query` is expected to use \n`$1, $2` as the formatting syntax.\n\nAnd if `formatDBType` in that case returns a custom-type object that does not support\ncustom formatting, then `query` will be expected to use `$*propName*` as the formatting syntax.\n\n### Raw Custom Types\n\nThis features allows overriding `raw` flag for the values returned from custom types.\n\nAny custom type or standard type that implements function `formatDBType` can also set\nproperty `_rawDBType = true` to force raw variable formatting on the returned value.\n\nThis makes the custom type formatting ultimately flexible, as there is no limitation\nas to how a custom type can format its value.\n\nFor example, some special types, like UUID, do not have natural presentation in JavaScript,\nso they have to be converted into text strings when passed into the query formatting.\nFor an array of UUID-s, for instance, you would have to explicitly cast the formatted value\nwith `::uuid[]` appended at the end of the variable.\n  \nYou can implement your own presentation for UUID that does not require extra casting:\n\n```js  \nfunction UUID(value) {\n    this.uuid = value;\n    this._rawDBType = true; // force raw format on output;\n    this.formatDBType = function () {\n        // alternatively, you can set flag\n        // _rawDBType during this call:\n        // this._rawDBType = true;\n        return this.uuid;\n    };\n}\n``` \n\nWhen you chain one custom-formatting type to return another one, please note that\nsetting `_rawDBType` on any level will set the flag for the entire chain.\n\n## Query Files\n  \nUse of external SQL files (via [QueryFile]) offers many advantages:\n\n* Much cleaner JavaScript code, with all SQL kept in external files;\n* Much easier to write large and well-formatted SQL, with comments and whole revisions;\n* Changes in external SQL can be automatically re-loaded (option `debug`), without restarting the app;\n* Pre-formatting SQL upon loading (option `params`), making a two-step SQL formatting very easy;\n* Parsing and minifying SQL (options `minify`/`compress`), for early error detection and smaller queries.\n\nExample:\n\n```js\nconst path = require('path');\n\n// Helper for linking to external query files:\nfunction sql(file) {\n    const fullPath = path.join(__dirname, file);\n    return new pgp.QueryFile(fullPath, {minify: true});\n}\n\n// Create a QueryFile globally, once per file:\nconst sqlFindUser = sql('./sql/findUser.sql');\n\ndb.one(sqlFindUser, {id: 123})\n    .then(user=> {\n        console.log(user);\n    })\n    .catch(error=> {\n        if (error instanceof pgp.errors.QueryFileError) {\n            // => the error is related to our QueryFile\n        }\n    });\n```\n\nFile `findUser.sql`:\n\n```sql\n/*\n    multi-line comment\n*/\nSELECT name, dob -- single-line comment\nFROM Users\nWHERE id = ${id}\n```\n\nEvery query method of the library can accept type [QueryFile] as its `query` parameter.\nThe type never throws any error, leaving it for query methods to reject with [QueryFileError].\n\n**IMPORTANT**\n\nYou should only create a single reusable instance of [QueryFile] per file, in order to avoid\nrepeated file reads, as the IO is a very expensive resource.\n\nNotable features of [QueryFile]:\n\n* `debug` mode, to make every query request check if the file has changed since it was last read, and if so - read it afresh.\n  This way you can write sql queries and see immediate updates without having to restart your application.\n* Option `params` is for static SQL pre-formatting, to inject certain values only once, like a schema name or a\n  configurable table name.\n\nIn version 5.2.0, support for type [QueryFile] was also integrated into the query formatting engine. See method [as.format].\n\n## Tasks\n\nA task represents a shared connection to be used within a callback function. The callback can be either a regular function or an ES6 generator.\n\nA transaction, for example, is just a special type of task, wrapped in `CONNECT->COMMIT/ROLLBACK`. \n\n```js\ndb.task(t => {\n    // execute a chain of queries;\n})\n    .then(data => {\n        // success;\n    })\n    .catch(error => {\n        // failed;    \n    });\n```\n\nThe purpose of tasks is simply to provide a shared connection context within the callback function to execute and return\na promise chain, and then automatically release the connection.\n\n## Transactions\n\nA transaction is a special type of task that automatically executes `BEGIN` + `COMMIT`/`ROLLBACK`:\n\n1. Acquires a new connection;\n2. Executes `BEGIN` command;\n3. Invokes your callback function (or generator) with the connection object;\n4. Executes `COMMIT`, if the callback resolves, or `ROLLBACK`, if the callback rejects or throws an error;\n5. Releases the connection (detached chains only);\n6. Resolves with the callback result, if successful; rejects with the reason when fails.\n\n```js\ndb.tx(t => {\n    // creating a sequence of transaction queries:\n    const q1 = t.none('UPDATE users SET active=$1 WHERE id=$2', [true, 123]);\n    const q2 = t.one('INSERT INTO audit(entity, id) VALUES($1, $2) RETURNING id',\n        ['users', 123]);\n\n    // returning a promise that determines a successful transaction:\n    return t.batch([q1, q2]); // all of the queries are to be resolved;\n})\n    .then(data => {\n        console.log(data); // printing successful transaction output;\n    })\n    .catch(error => {\n        console.log(error); // printing the error;\n    });\n```\n\nA detached transaction acquires a connection and exposes object `t`=`this` to let all containing queries\nexecute on the same connection.\n\n### Nested Transactions\n\nNested transactions automatically share the connection between all levels.\nThis library sets no limitation as to the depth (nesting levels) of transactions supported.\n\nExample:\n\n```js\ndb.tx(t => {\n    const queries = [\n        t.none('DROP TABLE users;'),\n        t.none('CREATE TABLE users(id SERIAL NOT NULL, name TEXT NOT NULL)')\n    ];\n    for (let i = 1; i <= 100; i++) {\n        queries.push(t.none('INSERT INTO users(name) VALUES($1)', 'name-' + i));\n    }\n    queries.push(\n        t.tx(t1 => {\n            return t1.tx(t2 => {\n                return t2.one('SELECT count(*) FROM users');\n            });\n        }));\n    return t.batch(queries);\n})\n    .then(data => {\n        console.log(data); // printing transaction result;\n    })\n    .catch(error => {\n        console.log(error); // printing the error;\n    });\n```\n\n### Implementation details\n\nIt is important to know that PostgreSQL doesn't have proper support for nested transactions, but it\nsupports [savepoints](http://www.postgresql.org/docs/9.4/static/sql-savepoint.html) inside\ntransactions. Nested transactions and save-points are two ways to deal with *partial rollbacks*.\nSave-points are more general and allow this library to offer you nested transactions as an\nabstraction.\n\nSave-points allow you to rollback to any previous state since the beginning of the (only) top-level\ntransaction. Nested transactions allow you to only rollback to the state at the beginning of\nthe current transaction. Proper support for nested transactions means that the result of a\nsuccessful sub-transaction or query is rolled back when its parent transaction is rolled back.\n\nFrom a practical point of view, it means that when using nested transactions, a rollback knows\nautomatically which state to restore but when using save-points you must specify which previous\nsave-point to use.\nThis library tracks the save-points for you so you can work as if nested transactions were\nsupported by Postgres.\n\nIt is important to note that when using either save-points or \"real\" nested transactions (which are\ntools for partial rollbacks), data is finally written only when the top level transaction is\ncommitted.\n\nAlso, Postgres uses `BEGIN` amd `COMMIT / ROLLBACK` for the top transaction and `SAVEPOINT pointName`\nand `ROLLBACK TO pointName` for inner save-points. This library automatically provides a transaction\non the top level, and save-points for all sub-transactions.\n\n### Limitations\n\nThis implementation of nested transactions has the following transactions\n- The `txMode` property of sub-transactions is ignored. The transaction mode is only applied for\n  `BEGIN` statements, so only for top-level transactions.\n- `SET TRANSACTION` statements are only effective if they are called before any query of the\n  real Postgres transaction. This means that once any nested transaction does a query, the\n  transaction mode is locked for the whole transaction tree.\n\nSee the implementation details above for more information.\n\n### Synchronous Transactions\n\nA regular task/transaction with a set of independent queries relies on method [batch] to resolve\nall queries asynchronously.\n\nHowever, when it comes to executing a significant number of queries during a bulk `INSERT` or `UPDATE`,\nsuch approach is no longer practical. For one thing, it implies that all requests have been created as promise objects,\nwhich isn't possible when dealing with a huge number of queries, due to memory limitations imposed by NodeJS.\nAnd for another, when one query fails, the rest will continue trying to execute, due to their promise nature,\nas being asynchronous.\n\nThis is why within each task/transaction we have method [sequence], to be able to execute a strict\nsequence of queries one by one, and if one fails - the rest won't try to execute.\n\n```js\nfunction source(index, data, delay) {\n    // must create and return a promise object dynamically,\n    // based on the index of the sequence;\n    switch (index) {\n        case 0:\n            return this.query('SELECT 0');\n        case 1:\n            return this.query('SELECT 1');\n        case 2:\n            return this.query('SELECT 2');\n    }\n    // returning or resolving with undefined ends the sequence;\n    // throwing an error will result in a reject;\n}\n\ndb.tx(t => {\n    return t.sequence(source);\n})\n    .then(data => {\n        console.log(data); // print result;\n    })\n    .catch(error => {\n        console.log(error); // print the error;\n    });\n```\n\nSequence is based on implementation of [spex.sequence].\n\n### Configurable Transactions\n\nIn order to be able to fine-tune database requests in a highly asynchronous environment,\nPostgreSQL supports *Transaction Snapshots*, plus 3 ways of configuring a transaction:\n\n* [SET TRANSACTION](http://www.postgresql.org/docs/9.4/static/sql-set-transaction.html), to configure the current transaction,\nwhich your can execute as the very first query in your transaction function;\n* `SET SESSION CHARACTERISTICS AS TRANSACTION` - setting default transaction properties for the entire session; \n* [BEGIN](http://www.postgresql.org/docs/9.4/static/sql-begin.html) + `Transaction Mode` - initiates a pre-configured transaction.\n\nThe first method is quite usable, but that means you have to start every transaction with\nan initial query to configure the transaction, which can be a bit awkward.\n\nThe second approach isn't very usable within a database framework as this one, which relies\non a connection pool, so you don't really know when a new connection is created.\n\nThe last method is not usable, because transactions in this library are automatic, executing `BEGIN`\nwithout your control, or so it was until [Transaction Mode] type was added (read further).\n\n---  \n\n[Transaction Mode] extends the `BEGIN` command in your transaction with a complete set of configuration parameters.\n\n```js\nconst TransactionMode = pgp.txMode.TransactionMode;\nconst isolationLevel = pgp.txMode.isolationLevel;\n \n// Create a reusable transaction mode (serializable + read-only + deferrable):\nconst tmSRD = new TransactionMode({\n    tiLevel: isolationLevel.serializable,\n    readOnly: true,\n    deferrable: true\n});\n\nfunction myTransaction() {\n    return this.query('SELECT * FROM table');\n}\n\nmyTransaction.txMode = tmSRD; // assign transaction mode;\n\ndb.tx(myTransaction)\n    .then(() => {\n        // success;\n    });\n```\n\nInstead of the default `BEGIN`, such transaction will initiate with the following command:\n```\nBEGIN ISOLATION LEVEL SERIALIZABLE READ ONLY DEFERRABLE\n```\n\nTransaction Mode is set via property `txMode` on the transaction function.\n\nThis is the most efficient and best-performing way of configuring transactions. In combination with\n*Transaction Snapshots* you can make the most out of transactions in terms of performance and concurrency.\n\n## Generators\n\nIf you prefer writing asynchronous code in a synchronous manner, you can implement your tasks and transactions as generators. \n\n```js\nfunction * getUser(t) {\n    let user = yield t.oneOrNone('SELECT * FROM users WHERE id = $1', 123);\n    return yield user || t.one('INSERT INTO users(name) VALUES($1) RETURNING *', 'John');\n}\n\ndb.task(getUser)\n    .then(user => {\n        // success;\n    })\n    .catch(error => {\n        // error;\n    });\n```\n\nThe library verifies whether the callback function is a generator, and executes it accordingly.\n\n# Advanced\n\n## Initialization Options\n\nWhen initializing the library, you can pass object `options` with a set of global properties.\nSee [API / options](http://vitaly-t.github.io/pg-promise/module-pg-promise.html) for complete list of supported options.\n\n---\n#### pgFormatting\n\nBy default, **pg-promise** provides its own implementation of the query formatting,\nas explained in [Queries and Parameters](#queries-and-parameters).\n\nIf, however, you want your queries formatted by the [PG] library, set parameter `pgFormatting`\nto be `true` when initializing the library, and every query formatting will redirect to the [PG]'s implementation.\n\nAlthough this has a huge implication to the library's functionality, it is not within the scope of this project to detail.\nFor any further reference you should use documentation of the [PG] library.\n\nBelow is just some of the query-formatting features implemented by [pg-promise] that are not in [node-postgres]:\n\n* [Custom Type Formatting](#custom-type-formatting)\n* Single-value formatting: [pg-promise] doesn't require use of an array when passing a single value;\n* [Raw-Text](https://github.com/vitaly-t/pg-promise/wiki/Learn-by-Example#raw-text) support: injecting raw/pre-formatted text values into the query;\n* Functions as formatting parameters, with the actual values returned from the callbacks;\n* [PostgreSQL Array Constructors](http://www.postgresql.org/docs/9.1/static/arrays.html#ARRAYS-INPUT) are used when formatting arrays,\nnot the old string syntax;\n* Automatic conversion of numeric `NaN`, `+Infinity` and `-Infinity` into their string presentation;\n* Support for [this reference](#this-reference);\n* Automatic [QueryFile] support\n\n**NOTE:** Formatting parameters for calling functions (methods `func` and `proc`) is not affected by this override.\nWhen needed, use the generic [query] instead to invoke functions with redirected query formatting.\n\n---\n#### promiseLib\n\nBy default, **pg-promise** uses ES6 Promise. If your version of NodeJS doesn't support ES6 Promise,\nor you want a different promise library to be used, set this property to the library's instance.\n\nExample of switching over to [Bluebird]:\n\n```js\nconst promise = require('bluebird');\nconst options = {\n    promiseLib: promise\n};\nconst pgp = require('pg-promise')(options);\n```\n\n[Promises/A+] libraries that implement a recognizable promise signature and work automatically:\n\n* **ES6 Promise** - used by default, though it doesn't have `done()` or `finally()`.\n* [Bluebird] - best alternative all around, which includes the very important [Long Stack Traces](http://bluebirdjs.com/docs/api/promise.longstacktraces.html); \n* [Promise] - very solid library;\n* [When] - quite old, not the best support;\n* [Q] - most widely used;\n* [RSVP] - doesn't have `done()`, use `finally/catch` instead\n* [Lie] - doesn't have `done()`. \n\nIf you pass in a library that doesn't implement a recognizable promise signature, **pg-promise** will\nthrow error `Invalid promise library specified.` during initialization.\n\nFor such libraries you can use [Promise Adapter] to make them compatible with **pg-promise**,\nmostly needed by smaller and simplified [Conformant Implementations](https://promisesaplus.com/implementations). \n\n## Library de-initialization\n\nWhen exiting your application, you can optionally call [pgp.end]:\n\n```js\npgp.end(); // terminate the database connection pool\n```\n\nThis will release [pg] connection pool globally and make sure that the process terminates without any delay.\nIf you do not call it, your process may be waiting for 30 seconds (default for [poolIdleTimeout](https://github.com/brianc/node-postgres/blob/master/lib/defaults.js#L44)),\nwaiting for the connection to expire in the pool.\n\nIf, however you normally exit your application by killing the NodeJS process, then you don't need to use it.\n\n# History\n\nFor the list of all changes see the [CHANGELOG](CHANGELOG.md).\n\n# License\n\nCopyright (c) 2017 Vitaly Tomilov (vitaly.tomilov@gmail.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\n[Configuration Object]:https://github.com/vitaly-t/pg-promise/wiki/Connection-Syntax#configuration-object\n[Connection String]:https://github.com/vitaly-t/pg-promise/wiki/Connection-Syntax#connection-string\n[query]:http://vitaly-t.github.io/pg-promise/Database.html#query\n[each]:http://vitaly-t.github.io/pg-promise/Database.html#each\n[map]:http://vitaly-t.github.io/pg-promise/Database.html#map\n[Connection Syntax]:https://github.com/vitaly-t/pg-promise/wiki/Connection-Syntax\n[helpers]:http://vitaly-t.github.io/pg-promise/helpers.html\n[QueryFile]:http://vitaly-t.github.io/pg-promise/QueryFile.html\n[QueryFileError]:http://vitaly-t.github.io/pg-promise/QueryFileError.html\n[PreparedStatement]:http://vitaly-t.github.io/pg-promise/PreparedStatement.html\n[ParameterizedQuery]:http://vitaly-t.github.io/pg-promise/ParameterizedQuery.html\n[Database]:http://vitaly-t.github.io/pg-promise/Database.html\n[QueryResultError]:http://vitaly-t.github.io/pg-promise/QueryResultError.html\n[Native Bindings]:https://github.com/brianc/node-postgres#native-bindings\n[Initialization Options]:#advanced\n[pgp.end]:http://vitaly-t.github.io/pg-promise/module-pg-promise.html#~end\n[pgp.as]:http://vitaly-t.github.io/pg-promise/formatting.html\n[as.value]:http://vitaly-t.github.io/pg-promise/formatting.html#.value\n[as.format]:http://vitaly-t.github.io/pg-promise/formatting.html#.format\n[as.alias]:http://vitaly-t.github.io/pg-promise/formatting.html#.alias\n[as.name]:http://vitaly-t.github.io/pg-promise/formatting.html#.name\n[batch]:http://vitaly-t.github.io/pg-promise/Task.html#batch\n[sequence]:http://vitaly-t.github.io/pg-promise/Task.html#sequence\n[Protocol API]:http://vitaly-t.github.io/pg-promise/index.html\n[API]:http://vitaly-t.github.io/pg-promise/index.html\n[API Documentation]:http://vitaly-t.github.io/pg-promise/index.html\n[Transaction Mode]:http://vitaly-t.github.io/pg-promise/txMode.TransactionMode.html\n[pg-minify]:https://github.com/vitaly-t/pg-minify\n[pg-monitor]:https://github.com/vitaly-t/pg-monitor\n[pg-promise]:https://github.com/vitaly-t/pg-promise\n[PG]:https://github.com/brianc/node-postgres\n[pg]:https://github.com/brianc/node-postgres\n[node-postgres]:https://github.com/brianc/node-postgres\n[Promises/A+]:https://promisesaplus.com/\n[Promise]:https://github.com/then/promise\n[Bluebird]:https://github.com/petkaantonov/bluebird\n[When]:https://github.com/cujojs/when\n[Q]:https://github.com/kriskowal/q\n[RSVP]:https://github.com/tildeio/rsvp.js\n[Lie]:https://github.com/calvinmetcalf/lie\n[Learn by Example]:https://github.com/vitaly-t/pg-promise/wiki/Learn-by-Example\n[Promise Adapter]:https://github.com/vitaly-t/pg-promise/wiki/Promise-Adapter\n[spex.sequence]:http://vitaly-t.github.io/spex/global.html#sequence\n[Result]:https://github.com/brianc/node-postgres/blob/master/lib/result.js#L14\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vitaly-t/pg-promise.git"
  },
  "scripts": {
    "coverage": "istanbul cover ./node_modules/jasmine-node/bin/jasmine-node test",
    "doc": "jsdoc -c ./jsdoc/jsDoc.json ./jsdoc/README.md",
    "lint": "eslint ./lib ./test/*.js ./test/db",
    "test": "jasmine-node test",
    "test-native": "jasmine-node test --config PG_NATIVE true",
    "travis": "npm run lint && istanbul cover ./node_modules/jasmine-node/bin/jasmine-node test --captureExceptions && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage"
  },
  "typings": "typescript/pg-promise.d.ts",
  "version": "5.9.7"
}
